#-*- codig:utf-8 -*-
import jqdatasdk as jq
from datetime import datetime, timedelta
import time
import numpy as np
import math

# https://www.joinquant.com/help/api/help#api:API%E6%96%87%E6%A1%A3
# https://www.joinquant.com/help/api/help#JQData:JQData

# aa is your account， bb is your password
jq.auth('aa','bb')

# http://fund.eastmoney.com/ETFN_jzzzl.html
stock_pool = [
    '159915.XSHE', # E Fund ChiNext ETF
    '510300.XSHG', # Huatai-PineBridge CSI 300 ETF
    '510500.XSHG', # Southward CSI 500 ETF
]

# momentum rotation parameters
stock_num = 1           # buy the top "stock_num" stocks with the highest rating
momentum_day = 29       # the latest momentum reference for the recent 'momentum_day'

# momentum rotation parameters
stock_num = 1           # buy the top "stock_num" stocks with the highest rating
momentum_day = 29       # the latest momentum reference for the recent 'momentum_day'

ref_stock = '000300.XSHG'   # Use ref_stock as the basis data for timing calculation
N = 18       # Calculate the latest slope, fitting degree r2 refers to the recent N days
M = 600       # Calculate the latest z-score, rsrs_score refers to the recent M days
score_threshold = 0.7       # rsrs standard score indicator threshold
#ma timing parameters
mean_day = 20       # Calculate the closing ma price at the end, referring to the recent mean_day

mean_diff_day = 3 # Calculate the initial ma closing price, referring to (mean_day + mean_diff_day) days ago, with a window period of mean_diff_day
day = 1


#1-1 Stock Selection Module - Momentum Factor Rotation
#Score stocks based on annualized return and coefficient of determination, and rank them from high to low by score
def get_rank(stock_pool):
    score_list = []
    for stock in stock_pool:
        current_dt = time.strftime("%Y-%m-%d", time.localtime())
        current_dt = datetime.strptime(current_dt, '%Y-%m-%d')
        previous_date  = current_dt - timedelta(days = day)
        data = jq.get_price(stock, end_date = previous_date, count = momentum_day, frequency='daily', fields=['close'])
        # Closing price
        y = data['log'] = np.log(data.close)
        # Number of data points (days) for analysis
        x = data['num'] = np.arange(data.log.size)
        # Fit a first-degree polynomial
        # y = kx + b, where k is gradient and b is the y-intercept
        slope, intercept = np.polyfit(x, y, 1)
        # (e ^ slope) ^ 250 - 1
        annualized_returns = math.pow(math.exp(slope), 250) - 1
        r_squared = 1 - (sum((y - (slope * x + intercept))**2) / ((len(y) - 1) * np.var(y, ddof=1)))
        score = annualized_returns * r_squared
        score_list.append(score)
    stock_dict = dict(zip(stock_pool, score_list))
    sort_list = sorted(stock_dict.items(), key = lambda item:item[1], reverse = True)
    print("#" * 30 + "choice" + "#" * 30)
    for stock in sort_list:
        stock_code = stock[0]
        stock_score = stock[1]
        security_info = jq.get_security_info(stock_code)
        stock_name = security_info.display_name
        print('{}({}):{}'.format(stock_name, stock_code, stock_score))
    print('#' * 64)
    code_list = []
    for i in range((len(stock_pool))):
        code_list.append(sort_list[i][0])
    rank_stock = code_list[0:stock_num]
    return rank_stock

#2-1 Time Selection Module - Calculate Linear Regression Statistics
#Build an OLS regression model on the input independent variable daily lowest price x (series) and dependent variable daily highest price y (series), and return a tuple (intercept, slope, goodness of fit)
#R2 is the statistical coefficient of determination for linear regression, also called the determination coefficient, fitting degree.
#The range of R2 is 0 to 1, the higher the fitting degree, the higher the explanatory power of the independent variable on the dependent variable, and the closer to 1 the better.
def get_ols(x, y):
    slope, intercept = np.polyfit(x, y, 1)
    r2 = 1 - (sum((y - (slope * x + intercept))**2) / ((len(y) - 1) * np.var(y, ddof=1)))
    return (intercept, slope, r2)

#2-2 Time Selection Module - Set Initial Slope Sequence
# Calculate the initial slopes through linear regression of the highest and lowest prices for the past M days, and return a list of slopes.
def initial_slope_series():
    current_dt = time.strftime("%Y-%m-%d", time.localtime())
    current_dt = datetime.strptime(current_dt, '%Y-%m-%d')
    previous_date  = current_dt - timedelta(days = day)
    data = jq.get_price(ref_stock, end_date = previous_date, count = N + M, frequency='daily', fields=['high', 'low'])
    return [get_ols(data.low[i:i+N], data.high[i:i+N])[1] for i in range(M)]

#2-3 Time Selection Module - Calculate Z-score
# Calculate and return the latest Z-score up to the end date of backtesting based on the slope list.
def get_zscore(slope_series):
    mean = np.mean(slope_series)
    std = np.std(slope_series)
    return (slope_series[-1] - mean) / std

#2-4 Time Selection Module - Calculate Composite Signal
#1. Obtain rsrs and MA signals, where rsrs signal algorithm refers to optimization instructions, and MA signal compares the size of MA values between two endpoints within a period of time
#2. Return a buy signal when signals are both True, return a sell signal when both are False, and return a hold position unchanged signal for other cases
#      Explanation:
#       MA signal: MA stands for Moving Average indicator.
#       RSRS signal:

def get_timing_signal(stock):
    # Calculate MA signal
    current_dt = time.strftime("%Y-%m-%d", time.localtime())
    current_dt = datetime.strptime(current_dt, '%Y-%m-%d')
    previous_date  = current_dt - timedelta(days = day)    
    close_data = jq.get_price(ref_stock, end_date = previous_date, count = mean_day + mean_diff_day,  frequency = 'daily',  fields = ['close'])
    # 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1，23 days，record last 20 days
    today_MA = close_data.close[mean_diff_day:].mean() 
    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0，23 days，record first 20 days
    before_MA = close_data.close[:-mean_diff_day].mean()
    # calculate rsrs signal
    high_low_data = jq.get_price(ref_stock, end_date = previous_date, count = N,  frequency='daily',   fields = ['high', 'low'])
    intercept, slope, r2 = get_ols(high_low_data.low, high_low_data.high)
    slope_series.append(slope)

    rsrs_score = get_zscore(slope_series[-M:]) * r2
    # Comprehensive evaluation of all signals
    if rsrs_score > score_threshold and today_MA > before_MA:
        return "BUY"
    elif rsrs_score < -score_threshold and today_MA < before_MA:
        return "SELL"
    else:
        return "KEEP"

slope_series = initial_slope_series()[:-1] #Remove the slope of the first day of backtesting, to avoid repeatedly adding it during running.

def get_test():
    for each_day in range(1, 100)[::-1]:
        current_dt = time.strftime("%Y-%m-%d", time.localtime())
        current_dt = datetime.strptime(current_dt, '%Y-%m-%d')
        previous_date  = current_dt - timedelta(days = each_day - 1)
        day = each_day
        print(each_day, previous_date)
        check_out_list = get_rank(stock_pool)
        for each_check_out in check_out_list:
            security_info = jq.get_security_info(each_check_out)
            stock_name = security_info.display_name
            stock_code = each_check_out
            print('stock selected today:{}({})'.format(stock_name, stock_code))
        #Get comprehensive timing signal
        timing_signal = get_timing_signal(ref_stock)
        print('signal today:{}'.format(timing_signal))
        print('*' * 100)

if __name__ == "__main__":
    check_out_list = get_rank(stock_pool)
    for each_check_out in check_out_list:
        security_info = jq.get_security_info(each_check_out)
        stock_name = security_info.display_name
        stock_code = each_check_out
        print('stock selected today:{}({})'.format(stock_name, stock_code))
    #Get comprehensive timing signal
    timing_signal = get_timing_signal(ref_stock)
    print('signal today:{}'.format(timing_signal))
    print('*' * 100)
